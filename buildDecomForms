# WARNING IF YOU EXCLUDE THE NEXT LINE THIS WILL NOT WORK!
# I Know and wasted two hours trouble shooting it!
# This makes an initial invocation of the .net class for the zip and unzip functions
Add-Type -AssemblyName System.IO.Compression.FileSystem
#Unzip function, this exists because the Extract-Archive cmdlet requires a .zip extenstion
function Unzip {
    param([string]$zipfile, [string]$outpath)
    [System.IO.Compression.ZipFile]::ExtractToDirectory($zipfile, $outpath)
}
#Zip function, this exists because the Compress-Archive cmdlet requires a .zip extenstion
function Zip {
    param([string]$folderInclude, [string]$outZip)
    [System.IO.Compression.CompressionLevel]$compression = "Optimal"
    $ziparchive = [System.IO.Compression.ZipFile]::Open( $outZip, "Update" )

    # loop all child files
    $realtiveTempFolder = (Resolve-Path $tempFolder -Relative).TrimStart(".\")
    foreach ($file in (Get-ChildItem $folderInclude -Recurse)) {
        # skip directories
        if ($file.GetType().ToString() -ne "System.IO.DirectoryInfo") {
            # relative path
            $relpath = ""
            if ($file.FullName) {
                $relpath = (Resolve-Path $file.FullName -Relative)
            }
            if (!$relpath) {
                $relpath = $file.Name
            } else {
                $relpath = $relpath.Replace($realtiveTempFolder, "")
                $relpath = $relpath.TrimStart(".\").TrimStart("\\")
            }

            # display
            Write-Host $relpath -Fore Green
            Write-Host $file.FullName -Fore Yellow

            # add file
            [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($ziparchive, $file.FullName, $relpath, $compression) | Out-Null
        }
    }
    $ziparchive.Dispose()
}
Function Get-FileName($initialDirectory)
{  
    Add-Type -AssemblyName System.Windows.Forms | Out-Null

        $OpenFileDialog = New-Object System.Windows.Forms.OpenFileDialog
        $OpenFileDialog.initialDirectory = $initialDirectory
        $OpenFileDialog.ShowDialog() | Out-Null
        $OpenFileDialog.filename
}

#This is the location for the template you want to replace text in
#$template = "c:\temp\template.docx"
#This is a temp folder created and destroyed by the overall process to work on the docx and xml files
$tempFolder = $env:TEMP + "\Populate-Word-DOCX"
#Feed file location
$pathToDecomDataCSV = Get-FileName -initialDirectory “c:\Users\$env:USERNAME\Desktop\”
#counter to also use as a index call
$iteration = 0
#location of your decom data the structure, variables and formats are specific to the csv created in the data pull script
$csv = Import-Csv $pathToDecomDataCSV



Do{
#making a clean workspace
Remove-Item $tempFolder -ErrorAction SilentlyContinue -Recurse -Confirm:$false | Out-Null
mkdir $tempFolder | Out-Null

#Decides on template to use
if ($csv[$iteration].serialnumber -eq "VMware ESX"){
    $template = "C:\Users\$env:USERNAME\Desktop\DecomStuff\templateV.docx"
    $fid ="V"
}Else{
    $template = "C:\Users\$env:USERNAME\Desktop\DecomStuff\templateP.docx"
    $fid = "P"
}

# unzip DOCX
Unzip $template $tempFolder
# replace text
$bodyFile = $tempFolder + "\word\document.xml"
$body = Get-Content $bodyFile
$body = $body.Replace("[placeholder1]", $csv[$iteration].DeviceName)
$body = $body.Replace("[placeholder2]", $csv[$iteration].ahnumber)
$body = $body.Replace("[placeholder3]", $csv[$iteration].serialnumber)
$body = $body.Replace("[placeholder4]", $csv[$iteration].modelname)
$body = $body.Replace("[placeholder5]", $csv[$iteration].racklabel)
$body = $body.Replace("[placeholder6]", $csv[$iteration].ip_address1)
$body = $body.Replace("[placeholder7]", $csv[$iteration].wwn1)
$body = $body.Replace("[placeholder8]", $csv[$iteration].wwn2)
$body = $body.Replace("[Blank]", "")
$body | Out-File $bodyFile -Force -Encoding ascii

# zip DOCX
$destfile = $template.Replace(".docx", $csv[$iteration].DeviceName+ ".docx")
Remove-Item $destfile -Force -ErrorAction SilentlyContinue
Zip $tempFolder $destfile
# clean folder
Remove-Item $tempFolder -ErrorAction SilentlyContinue -Recurse -Confirm:$false | Out-Null
#move to different folder
Move-Item -Path $destfile -Destination $destfile.replace("DecomStuff","DecomStuff\DecomInfoForms")
#rename final version
$newname = $csv[$iteration].DeviceName + " Server Decom Info Form.docx"
Rename-Item -Path $destfile.replace("DecomStuff","DecomStuff\DecomInfoForms") -NewName $newname
#upcount aka next host item in array
$iteration++
#once the iteration is equal to the count its done ... because first index is [0] yah but count starts at 1
}While($iteration -lt ($csv.count))
